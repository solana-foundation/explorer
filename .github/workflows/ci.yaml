name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  # cash folder for pnpm_store, nextjs and playwright later on
  PW_CACHE_AFFIX: pw
  PW_CACHE_FOLDER: ~/.cache/ms-playwright
  PNPM_CACHE_FOLDER: ~/.pnpm-store

jobs:
  # Job to read Node version from .nvmrc
  read-nvmrc:
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.nvmrc.outputs.NODE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .nvmrc
          sparse-checkout-cone-mode: false

      - name: Read .nvmrc
        id: nvmrc
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_OUTPUT

  Build-And-Test:
    needs: read-nvmrc
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        node-version: ['${{ needs.read-nvmrc.outputs.node-version }}']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install package manager
        uses: pnpm/action-setup@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Setup pnpm config
        run: pnpm config set store-dir ${{ env.PNPM_CACHE_FOLDER }}

      - name: Setup Cache
        uses: actions/cache@v4
        id: pnpm_store_cache
        with:
          path: |
            ${{ env.PNPM_CACHE_FOLDER }}
            ${{ env.PW_CACHE_FOLDER }}
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-${{ env.PW_CACHE_AFFIX }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/.browserslistrc') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.PW_CACHE_AFFIX }}-
            ${{ runner.os }}-${{ env.PW_CACHE_AFFIX }}-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: |
          echo "Node version: $(node --version)"
          echo "PNPM version: $(pnpm --version)"
          pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Code-style
        run: pnpm format:ci

      - name: Test
        env:
          TEST_SERIAL_TIMEOUT: ${{ vars.TEST_SERIAL_TIMEOUT }}
        run: |
          pnpm test:ci
